/*
 * Generated by GenerateRestApiA&A  version 1.0.0
 */
package {{mainPackageName}}.rest; 

import org.springframework.web.bind.annotation.*;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

import {{mainPackageName}}.model.{{entityName}};
import {{mainPackageName}}.listitem.{{entityName}}ListItem;
import {{mainPackageName}}.dao.{{entityName}}Dao;
import {{mainPackageName}}.rest.common.AbstractResourceController;
/**
 * Java REST for entity "{{entitiName}}" <br>
 * Generated basic cruds operators <br>
 * Can be used both as a "web form" and "persistence record" <br>
 * 
 * @author Grover Wilson Quisbert Iba√±ez
 *
 */
@RestController
@EnableAutoConfiguration
@RequestMapping("{{restServicePrefix}}/{{serviceName}}")
public class {{entityName}}Service extends AbstractResourceController { 

	public {{entityName}}Service() {
		super();
		logger.info("Constructor.");
	}

	@Autowired
	{{entityName}}Dao dao;

	/**
     * @return FindAll
     */
	@RequestMapping(method=RequestMethod.GET, 
		produces = MediaType.APPLICATION_JSON_VALUE)
	public List<{{entityName}}> readAll(){
		logger.info("Find all... ");
		return dao.findAll();
	}
	
	/**
     * Get the "id" field value 
     * @return findOne
     */
	@RequestMapping(value="/{id}",
		method=RequestMethod.GET, 
		produces = MediaType.APPLICATION_JSON_VALUE)
	public Optional<{{entityName}}> read(@PathVariable("id") {{entityIdType}} id){
		logger.info("Find by id {}"+id);
		return dao.findOne(id);
	}
	
	/**
     * InsertRow
     * @return Save or Null
     */
	@RequestMapping(method=RequestMethod.POST, 
		produces = MediaType.APPLICATION_JSON_VALUE, 
		consumes = MediaType.APPLICATION_JSON_VALUE)
	public {{entityName}} create(@RequestBody {{entityName}} entity){
		logger.info("Create new item ");
		if(dao.existe(entity.get{{entityIdName}}())) {               
			logger.info("item allready exist");
			return null;
		}else {
			return dao.save(entity);
		}
	}
	
	/**
     * UpdateRow
     * @return Save or Null
     */

	@RequestMapping(method=RequestMethod.PUT, 
		produces = MediaType.APPLICATION_JSON_VALUE, 
		consumes = MediaType.APPLICATION_JSON_VALUE)
	public {{entityName}} update(@RequestBody {{entityName}} entity){
		logger.info("Update item {}");
		if(dao.existe(entity.get{{entityIdName}}())) {      
			return dao.save(entity);
		}else {
			logger.info("item notfound...");
			return null;
		}
	}
	
	/**
     * DeletedRow
     * @return True or False
     */
	@RequestMapping(value="/{id}",
		method=RequestMethod.DELETE, 
		produces = MediaType.APPLICATION_JSON_VALUE, 
		consumes = MediaType.APPLICATION_JSON_VALUE)
	public boolean delete(@PathVariable("id") {{entityIdType}} id){
		logger.info("Deleted by id {}" +id);
		boolean val = dao.existe(id);
		if(!val) {
			logger.info("Item not found "+id);
			return false;
		}else {
			dao.delete(id);
			return true;
		}
	}
	
	/**
     * Delete List
     * @return true
     */
	@RequestMapping(method=RequestMethod.DELETE, 
		produces = MediaType.APPLICATION_JSON_VALUE, 
		consumes = MediaType.APPLICATION_JSON_VALUE)
	public boolean deleteAll(@RequestBody List<{{entityName}}> entityList){
		dao.deleteAll(entityList);
		return true;
	}

	/**
     * Get List Plain
     * @return date|
     */
	@RequestMapping(value="/{{entityName}}-list-items",
		produces = MediaType.APPLICATION_JSON_VALUE)
	public List<{{entityName}}ListItem> listItems() {
		logger.info("listItems()...");
		List<{{entityName}}> list = dao.findAll();
		List<{{entityName}}ListItem> items = new LinkedList<{{entityName}}ListItem>();
		for ( {{entityName}} lista : list ) {
			items.add(new {{entityName}}ListItem( lista ) );
		}
		return items;
	}

}